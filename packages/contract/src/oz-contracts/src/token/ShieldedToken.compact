// SPDX-License-Identifier: MIT

pragma language_version >= 0.16.0;

/**
 * @module ShieldedToken (archived until further notice, DO NOT USE IN PRODUCTION)
 * @description A shielded token module.
 *
 * @notice This module utilizes the existing coin infrastructure of Midnight.
 * Due to the current limitations of the network, this module should NOT be used.
 *
 * Some of the limitations include:
 *
 * - No custom spend logic. Once users receive tokens, there's no mechanism to
 * enforce any token behaviors. This is a big issue with stable coins, for instance.
 * Most stable coins want the ability to pause functionality and/or freeze assets from
 * specific addresses. This is currently not possible.
 *
 * - Cannot guarantee proper total supply accounting. The total supply of a given token
 * is stored in the contract state. There's nothing to prevent users from burning
 * tokens manually by directly sending them to the burn address. This breaks the
 * total supply accounting (and potentially many other mechanisms).
 *
 * @notice This module will be revisited when the Midnight network can offer solutions to these
 * issues. Until then, the recommendation is to use unshielded tokens.
 *
 * @dev Future ideas to consider:
 *
 * - Provide a self-minting mechanism.
 * - Enable the Shielded contract itself to transfer.
 * - Should this be a part of the Shielded module itself or as an extension?
 */
module ShieldedToken { // DO NOT USE IN PRODUCTION!
  import CompactStandardLibrary;
  import "../utils/Utils" prefix Utils_;

  // Public state
  export ledger _counter: Counter;
  export ledger _nonce: Bytes<32>;
  export ledger _totalSupply: Uint<64>;
  export sealed ledger _domain: Bytes<32>;
  export sealed ledger _name: Maybe<Opaque<"string">>;
  export sealed ledger _symbol: Maybe<Opaque<"string">>;
  export sealed ledger _decimals: Uint<8>;

  /**
   * @description Initializes the contract by setting the initial nonce
   * and the metadata.
   *
   * @return {[]} - Empty tuple.
   */
  export circuit initializer(
    initNonce: Bytes<32>,
    name_: Maybe<Opaque<"string">>,
    symbol_: Maybe<Opaque<"string">>,
    decimals_ :Uint<8>
  ): [] {
    _nonce = disclose(initNonce);
    _domain = pad(32, "ShieldedToken");
    _name = disclose(name_);
    _symbol = disclose(symbol_);
    _decimals = disclose(decimals_);
  }

  /**
   * @description Returns the token name.
   *
   * @return {Maybe<Opaque<"string">>} - The token name.
   */
  export circuit name(): Maybe<Opaque<"string">> {
    return _name;
  }

  /**
   * @description Returns the symbol of the token.
   *
   * @return {Maybe<Opaque<"string">>} - The token symbol.
   */
  export circuit symbol(): Maybe<Opaque<"string">> {
    return _symbol;
  }

  /**
   * @description Returns the number of decimals used to get its user representation.
   *
   * @return {Uint<8>} - The account's token balance.
   */
  export circuit decimals(): Uint<8> {
    return _decimals;
  }

  /**
   * @description Returns the value of tokens in existence.
   * @notice The total supply accounting mechanism cannot be guaranteed to be accurate.
   * There is nothing to prevent users from directly sending tokens to the burn
   * address without going through the contract; thus, tokens will be burned
   * but the accounted supply will not change.
   *
   * @return {Uint<64>} - The total supply of tokens.
   */
  export circuit totalSupply(): Uint<64> {
    return _totalSupply;
  }

  /**
   * @description Mints `amount` of tokens to `recipient`.
   * @dev This circuit does not include access control meaning anyone can call it.
   *
   * @param {recipient} - The ZswapCoinPublicKey or ContractAddress that receives the minted tokens.
   * @param {amount} - The value of tokens minted.
   * @return {CoinInfo} - The description of the newly created coin.
   */
  export circuit mint(recipient: Either<ZswapCoinPublicKey, ContractAddress>, amount: Uint<64>): CoinInfo {
    assert(!Utils_isKeyOrAddressZero(recipient), "ShieldedToken: invalid recipient");

    _counter.increment(1);
    const newNonce = evolveNonce(_counter, _nonce);
    _nonce = newNonce;
    const ret = mintToken(_domain, disclose(amount), _nonce, disclose(recipient));
    _totalSupply = disclose(_totalSupply + amount as Uint<64>);
    return ret;
  }

  /**
   * @description Destroys `amount` of `coin` by sending it to the burn address.
   * @dev This circuit does not include access control meaning anyone can call it.
   * @throws Will throw if `coin` color is not this contract's token type.
   * @throws Will throw if `amount` is less than `coin` value.
   *
   * @param {coin} - The coin description that will be burned.
   * @param {amount} - The value of `coin` that will be burned.
   * @return {SendResult} - The output of sending tokens to the burn address. This may include change from
   * spending the output if available.
   */
  export circuit burn(coin: CoinInfo, amount: Uint<64>): SendResult {
    assert(coin.color == tokenType(_domain, kernel.self()), "ShieldedToken: token not created from this contract");
    assert(coin.value >= amount, "ShieldedToken: insufficient token amount to burn");

    receive(disclose(coin));
    _totalSupply = disclose(_totalSupply - amount);

    const sendRes = sendImmediate(disclose(coin), burnAddress(), disclose(amount));
    if (disclose(sendRes.change.is_some)) {
      // tmp for only zswap because we should be able to handle contracts burning tokens
      // and returning change.
      const tmpAddr = left<ZswapCoinPublicKey, ContractAddress>(ownPublicKey());
      sendImmediate(disclose(sendRes.change.value), tmpAddr, disclose(sendRes.change.value.value));
    }

    return sendRes;
  }
}
