// SPDX-License-Identifier: MIT

pragma language_version >= 0.16.0;

import CompactStandardLibrary;

import "../../Ownable" prefix Ownable_;

export { ZswapCoinPublicKey, ContractAddress, Either, Maybe };

/**
 * @description `isInit` is a param for testing.
 *
 * If `isInit` is false, the constructor will not initialize the contract.
 * This behavior is to test that circuits are not callable unless the
 * contract is initialized.
*/
constructor(initialOwner: Either<ZswapCoinPublicKey, ContractAddress>, isInit: Boolean) {
  if (disclose(isInit)) {
    Ownable_initialize(initialOwner);
  }
}

export circuit owner(): Either<ZswapCoinPublicKey, ContractAddress> {
  return Ownable_owner();
}

export circuit transferOwnership(newOwner: Either<ZswapCoinPublicKey, ContractAddress>): [] {
  return Ownable_transferOwnership(newOwner);
}

export circuit _unsafeTransferOwnership(newOwner: Either<ZswapCoinPublicKey, ContractAddress>): [] {
  return Ownable__unsafeTransferOwnership(newOwner);
}

export circuit renounceOwnership(): [] {
  return Ownable_renounceOwnership();
}

export circuit assertOnlyOwner(): [] {
  return Ownable_assertOnlyOwner();
}

export circuit _transferOwnership(newOwner: Either<ZswapCoinPublicKey, ContractAddress>): [] {
  return Ownable__transferOwnership(newOwner);
}

export circuit _unsafeUncheckedTransferOwnership(newOwner: Either<ZswapCoinPublicKey, ContractAddress>): [] {
  return Ownable__unsafeUncheckedTransferOwnership(newOwner);
}
